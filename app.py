
import requests
import json
from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

YC_TOKEN = os.getenv('YC_TOKEN')
USER_TOKEN = os.getenv('USER_TOKEN')
PARTNER_TOKEN = os.getenv('PARTNER_TOKEN')
CRM_TOKEN = os.getenv('CRM_TOKEN')

app = Flask(__name__)
CORS(app)

headers = {
    "Accept": "application/vnd.yclients.v2+json",
    "Content-Type": "application/json",
    "Authorization": f"Bearer {PARTNER_TOKEN}, User {USER_TOKEN}"
}

TG_BOT_TOKEN = os.getenv('TG_BOT_TOKEN')
TG_CHAT_ID = os.getenv('TG_CHAT_ID')

def send_telegram_message(text):
    url = f'https://api.telegram.org/bot{TG_BOT_TOKEN}/sendMessage'
    payload = {'chat_id': TG_CHAT_ID, 'text': text}
    try:
        r = requests.post(url, json=payload)
        print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∫–æ–¥ {r.status_code})")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def get_calls():
    url = "https://api.yclients.com/api/v1/voip/calls"
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–∞—Ö:")
            calls_data = response.json()
            print(json.dumps(calls_data, indent=2, ensure_ascii=False))
            return calls_data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return None

@app.route('/webhook', methods=['POST'])
def webhook():
    print("üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    try:
        data = request.get_json()
        if data:
            print("üì• –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:")
            print(json.dumps(data, indent=2, ensure_ascii=False))
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return jsonify({"status": "error", "message": "Invalid request"}), 400

    if not data:
        return jsonify({"status": "error", "message": "No data received"}), 400

    caller_info = data.get("caller_id_number", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
    direction = data.get("direction", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    call_status = data.get("event", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")

    message = (
        f"üìû –ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫!
"
        f"üë§ –ù–æ–º–µ—Ä: {caller_info}
"
        f"‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}
"
        f"üìç –°–æ–±—ã—Ç–∏–µ: {call_status}"
    )

    send_telegram_message(message)
    return jsonify({"status": "success"}), 200

def setup_integration():
    payload = {
        "command": "setup",
        "type": "enable",
        "crm_token": CRM_TOKEN
    }

    print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    try:
        response = requests.post("https://api.yclients.com/api/v1/voip/integration", headers=headers, data=json.dumps(payload))
        if response.status_code == 202:
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")

if __name__ == '__main__':
    setup_integration()
    print("üü¢ –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5050...")
    app.run(debug=True, port=5050)
